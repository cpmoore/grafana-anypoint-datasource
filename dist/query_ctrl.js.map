{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","target","type","organization","environment","resource","metric","legendFormat","metricTarget","aggregation","refresh","panelCtrl","metricAggregationTypes","targetTypes","resourceTypes","found","Set","all","Promise","resolve","reject","datasource","promiseMultipleEnvironments","org","env","getRuntimeManagerResourceList","then","rowlist","i1","length","rows","i","has","name","add","push","value","text","sort","a","b","localeCompare","catch","error","console","log","z","map","y","organizationCache","list","endsWith","setTimeout","getOrganizations","orgName","envName","d","x","QueryCtrl","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n    constructor($scope, $injector) {\n        super($scope, $injector);\n        this.target.type = this.target.type || 'ACCOUNT_RESOURCES';\n        this.target.organization = this.target.organization || '';\n        this.target.environment = this.target.environment || '';\n        this.target.resource = this.target.resource || 'ALL';\n        this.target.metric = this.target.metric || '';\n        this.target.legendFormat = this.target.legendFormat || '';\n        this.target.metricTarget = this.target.metricTarget || '';\n        this.target.aggregation = this.target.aggregation || 'avg';\n        this.refresh = this.panelCtrl.refresh\n        this.metricAggregationTypes=['avg','min','max','sum','count']\n        this.targetTypes = [\n            {'value': 'ACCOUNT_RESOURCES', 'text': \"Account Resources\"},\n            {'value': 'RUNTIME_MANAGER_RESOURCES', 'text': \"Runtime Manager Resources\"},\n            {'value': 'RUNTIME_MANAGER_METRICS', 'text': \"Runtime Manager Metrics\"}\n        ];\n        this.resourceTypes = {\n            'ACCOUNT_RESOURCES': [\n                {'value': 'ALL', 'text': 'All'},\n                {'value': 'ORGANIZATION', 'text': 'Organizations'},\n                {'value': 'ENVIRONMENT', 'text': 'Environments'}\n            ],\n            'RUNTIME_MANAGER_RESOURCES': [\n                {'value': 'ALL', 'text': 'All'},\n                {'value': 'APPLICATION', 'text': 'Applications'},\n                {'value': 'SERVER', 'text': 'Servers'},\n                {'value': 'SERVER_GROUP', 'text': 'Server Groups'},\n                {'value': 'CLUSTER', 'text': 'Clusters'}\n            ],\n            'RUNTIME_MANAGER_METRICS': [\n                {'value': 'APPLICATION', 'text': 'Applications'},\n                {'value': 'SERVER', 'text': 'Servers'}\n            ]\n        }\n    }\n\n    getMetricTargets() {\n        let found = new Set();\n        let all = []\n        return new Promise((resolve, reject) => {\n            this.datasource.promiseMultipleEnvironments({\n                organization: this.target.organization,\n                environment: this.target.environment\n            }, (org, env) => {\n                return this.datasource.getRuntimeManagerResourceList(org, env)\n            }).then((rowlist) => {\n                for (let i1 = 0; i1 < rowlist.length; i1++) {\n                    let rows = rowlist[i1]\n                    for (let i = 0; i < rows.length; i++) {\n                        if (rows[i].type !== this.target.resource || found.has(rows[i].name)) {\n                            continue\n                        }\n                        found.add(rows[i].name)\n                        all.push({value: rows[i].name, text: rows[i].name})\n                    }\n                }\n                resolve(all.sort((a, b) => a.text.localeCompare(b.text)))\n            }).catch((error) => {\n                console.log(error)\n            })\n        })\n    }\n\n    getMetricTypes() {\n        return new Promise((resolve) => {\n            let z = []\n            if (this.target.resource === 'SERVER') {\n                z = [\n                    \"class-loading-unloaded\",\n                    \"memory-usage\",\n                    \"thread-count\",\n                    \"tenured-gen-committed\",\n                    \"compressed-class-space-usage\",\n                    \"class-loading-total\",\n                    \"survivor-usage\",\n                    \"gc-mark-sweep-count\",\n                    \"compressed-class-space-committed\",\n                    \"gc-mark-sweep-time\",\n                    \"survivor-total\",\n                    \"tenured-gen-total\",\n                    \"memory-committed\",\n                    \"cpu-usage\",\n                    \"gc-par-new-count\",\n                    \"metaspace-committed\",\n                    \"code-cache-total\",\n                    \"gc-par-new-time\",\n                    \"survivor-committed\",\n                    \"code-cache-usage\",\n                    \"eden-total\",\n                    \"tenured-gen-usage\",\n                    \"eden-committed\",\n                    \"metaspace-total\",\n                    \"load-average\",\n                    \"memory-total\",\n                    \"class-loading-loaded\",\n                    \"metaspace-usage\",\n                    \"eden-usage\",\n                    \"compressed-class-space-total\",\n                    \"available-processors\"\n                ]\n            } else if (this.target.resource === 'APPLICATION') {\n                z = [\n                    'error-count',\n                    'message-count',\n                    'response-time'\n                ]\n            }\n            resolve(z.sort().map((y) => {\n                return {'value': y, 'text': y}\n            }))\n        })\n\n    }\n\n    getResourceTypes() {\n        return new Promise((resolve) => {\n            resolve(this.resourceTypes[this.target.type] || [])\n        })\n    }\n\n    getOrganizations() {\n        return new Promise((resolve) => {\n            if (this.datasource.organizationCache.list.length) {\n                if(this.target.type.endsWith('_RESOURCES')){\n                    return resolve([\n                        {'value': '*', 'text': \"All\"},\n                        ...this.datasource.organizationCache.list\n                    ])\n                }else{\n                    return resolve(this.datasource.organizationCache.list)\n                }\n\n            }\n            setTimeout(() => {\n                this.getOrganizations().then(resolve)\n            }, 1000)\n        })\n    }\n\n    getEnvironments() {\n        return this.datasource.promiseMultipleEnvironments({\n            organization: this.target.organization,\n            environment: '*'\n        }, (org, env, orgName, envName) => envName).then((d) => {\n            let all = [];\n            if(this.target.type.endsWith('_RESOURCES')){\n                all.push({'value': '*', 'text': \"All\"})\n            }\n            let found = new Set();\n            for (let i = 0; i < d.length; i++) {\n                if (!found.has(d[i])) {\n                    found.add(d[i]);\n                    all.push({value: d[i], text: d[i]})\n                }\n            }\n            return all\n        })\n    }\n\n    onTargetTypeChange() {\n        if(!this.target.type.endsWith('_RESOURCES')) {\n            if(this.target.organization==='*'){\n                this.target.organization=''\n            }\n            if(this.target.environment==='*'){\n                this.target.environment=''\n            }\n        }\n        let x = this.resourceTypes[this.target.type] || [];\n        if (x.length) {\n            this.target.resource = x[0].value\n        }\n        this.refresh()\n    }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}