{"version":3,"sources":["../src/datasource.js"],"names":["delay","time","Promise","resolve","reject","setTimeout","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authData","username","jsonData","password","name","q","accessToken","headers","organizations","environments","organizationNames","environmentNames","loginTimer","loginOrRetry","login","then","response","status","query","interpolated","target","replace","doRequest","data","method","mapToTextValue","options","_","isEmpty","targets","when","allQueryPromise","map","doRuntimeManagerResourceQuery","all","responseList","result","each","index","organization","environment","hasOwnProperty","catch","Error","resource","toUpperCase","typeIndex","columns","rows","mapOne","obj","statues","i","length","statusCode","organizationId","environmentId","push","x","text","deployments","i2","deployment","artifact","lastReportedStatus","id","details","servers","server","parent","parentType","addresses","JSON","stringify","error","console","log","clearTimeout","message","access_token","r","user","memberOfOrganizations","o","value","expires_in","err","currentOrganization","Array","isArray","d","isObject","endsWith","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nfunction delay(time) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(resolve, time || 1000)\n  })\n}\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.authData = { username: instanceSettings.jsonData.username, password: instanceSettings.jsonData.password }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.accessToken = null;\n    this.headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n    this.organizations = []\n    this.environments = {}\n    this.organizationNames = {}\n    this.environmentNames = {}\n    this.loginTimer = setTimeout(this.loginOrRetry, 5000)\n  }\n  loginOrRetry() {\n    this.login().then((response) => {\n      if (response.status === 'failure') {\n        this.loginTimer = setTimeout(this.loginOrRetry, 5000)\n      }\n    })\n  }\n  \n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n  query(options) {\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(options.targets)) {\n      return this.$q.when({ data: [] })\n    }\n    const allQueryPromise = _.map(options.targets, target => {\n      if (target.type === 'RUNTIME_MANAGER_RESOURCES') {\n        return this.doRuntimeManagerResourceQuery(target)\n      } else {\n        return new Promise(function (resolve, reject) {\n          return resolve([])\n        })\n      }\n    });\n    return this.q.all(allQueryPromise).then((responseList) => {\n      let result = { data: [] };\n      _.each(responseList, (response, index) => {\n        result.data = [...result.data, ...response]\n      });\n      return result\n    })\n  }\n  doRuntimeManagerResourceQuery(target) {\n    let headers = {\n      'X-ANYPNT-ORG-ID': this.templateSrv.replace(target.organization, null, 'regex'),\n      'X-ANYPNT-ENV-ID': this.templateSrv.replace(target.environment, null, 'regex')\n    };\n    if (!headers['X-ANYPNT-ENV-ID'] || !headers['X-ANYPNT-ORG-ID']) {\n      return []\n    }\n    if (!this.environments.hasOwnProperty(headers['X-ANYPNT-ORG-ID'])) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.doRuntimeManagerResourceQuery(target).then(resolve).catch(reject)\n        }, 1000)\n      })\n    }\n\n    return this.doRequest({\n      url: '/armui/api/v1/servers',\n      headers: headers\n    }).then((data) => {\n      if (!data) {\n        throw new Error('No response received')\n      } else if (data.status !== 200) {\n        throw new Error(\"Status code \" + data.status + \" received\")\n      }\n      data = data.data.data\n\n      let resource = target.resource.toUpperCase();\n      let typeIndex;\n      let columns = [\n        { 'text': 'type', 'type': 'string' },\n        { 'text': 'name', 'type': 'string' },\n        { 'text': 'organization', 'type': 'string' },\n        { 'text': 'environment', 'type': 'string' },\n        { 'text': 'status', 'type': 'string' },\n        { 'text': 'id', 'type': 'string' },\n        { 'text': 'organizationId', 'type': 'string' },\n        { 'text': 'environmentId', 'type': 'string' },\n        { 'text': 'statusCode', 'type': 'number' }\n      ]\n      if (resource === 'APPLICATION' || resource === 'ALL') {\n        columns = [...columns,\n        { 'text': 'fileChecksum', 'type': 'string' },\n        { 'text': 'fileName', 'type': 'string' },\n        { 'text': 'lastUpdateTime', 'type': 'string' }\n        ]\n      }\n      if (resource === 'SERVER' || resource === 'ALL') {\n        columns = [\n          ...columns,\n          { 'text': 'agentVersion', 'type': 'string' },\n          { 'text': 'runtimeVersion', 'type': 'string' },\n          { 'text': 'currentClusteringIp', 'type': 'string' },\n          { 'text': 'addresses', 'type': 'string' },\n          { 'text': 'parent', 'type': 'string' },\n          { 'text': 'parentType', 'type': 'string' }\n        ]\n      }\n\n      let response = {\n        columns: columns,\n        rows: [], type: 'table'\n      }\n      let organizationNames = this.organizationNames;\n      let environmentNames = this.environmentNames;\n      function mapOne(obj) {\n        let statues = ['RUNNING', 'STARTED', 'DISCONNECTED', 'STOPPED', 'DEPLOYMENT_FAILED']\n        let i;\n        for (i = 0; i < statues.length; i++) {\n          if (obj.status === statues[i]) {\n              break;\n          }\n        }\n        obj.statusCode = i+1;\n        obj.organizationId=headers['X-ANYPNT-ORG-ID']\n        obj.organization=organizationNames[headers['X-ANYPNT-ORG-ID']]\n        obj.environmentId=headers['X-ANYPNT-ENV-ID']\n        obj.environment=environmentNames[headers['X-ANYPNT-ENV-ID']]\n        response.rows.push(columns.map(x => obj[x.text] || ''))\n      }\n\n      for (let i = 0; i < data.length; i++) {\n\n        if (resource === 'APPLICATION' || target.resource === 'ALL') {\n          let deployments = data[i].deployments\n          for (let i2 = 0; i2 < deployments.length; i2++) {\n            let deployment = deployments[i2].artifact;\n            deployment.status = deployments[i2].lastReportedStatus;\n            deployment.id = deployments[i2].id;\n            deployment.type = 'APPLICATION'\n            mapOne(deployment)\n          }\n        }\n        if ((resource === 'SERVER' || target.resource === 'ALL') && data[i].details && data[i].details.servers) {\n          let servers = data[i].details.servers;\n          for (let i2 = 0; i2 < servers.length; i2++) {\n            let server = servers[i2].details;\n            server.id = servers[i2].id;\n            server.name = servers[i2].name;\n            server.status = servers[i2].status;\n            server.type = 'SERVER';\n            server.parent = data[i].name;\n            server.parentType = data[i].type\n            server.addresses=JSON.stringify(server.addresses)\n            mapOne(server)\n          }\n        }\n        if (resource === data[i].type || resource === 'ALL') {\n          mapOne(data[i])\n        }\n      }\n      return [response];\n\n    }).catch(function (error) {\n      console.log(error)\n      throw error\n    })\n    // var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({ data: [] });\n    // }\n\n    // if (this.templateSrv.getAdhocFilters) {\n    //   query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    // } else {\n    //   query.adhocFilters = [];\n    // }\n\n    // return this.doRequest({\n    //   url: '/query',\n    //   data: query,\n    //   method: 'POST'\n    // });\n  }\n\n  login() {\n    clearTimeout(this.loginTimer)\n    console.log('Getting access token')\n    this.accessToken = ''\n    return this.doRequest({\n      url: '/accounts/login',\n      method: 'POST',\n      data: this.authData\n    }).then(response => {\n      if (!response) {\n        this.accessToken = null\n        return { status: \"error\", message: \"Invalid credentials\" };\n      } else if (response.status === 200) {\n        this.accessToken = response.data.access_token\n        this.doRequest({\n          url: '/accounts/api/me',\n          method: 'GET'\n        }).then((r) => {\n          this.organizations = r.data.user.memberOfOrganizations.map((o) => {\n            this.organizationNames[o.id] = o.name;\n            return { text: o.name, value: o.id }\n          })\n          r = r.data.access_token;\n          let time = 1000 * (r.expires_in) - 30\n          if (time < 10000) {\n            time = 10000\n          }\n          console.log(\"reauthenticating in\", time)\n          this.loginTimer = setTimeout(this.loginOrRetry, time)\n        })\n        return { status: \"success\", message: \"Data source is working\" };\n      } else {\n        this.accessToken = null\n        return { status: \"failure\", message: \"Status code: \" + response.status };\n      }\n    }).catch(function (err) {\n      console.log(err)\n      this.accessToken = null\n      return { status: \"failure\", message: \"Unknown error, possible invalid url.\" };\n    })\n  }\n  testDatasource() {\n    return this.login();\n  }\n\n  // annotationQuery(options) {\n  //   var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n  //   var annotationQuery = {\n  //     range: options.range,\n  //     annotation: {\n  //       name: options.annotation.name,\n  //       datasource: options.annotation.datasource,\n  //       enable: options.annotation.enable,\n  //       iconColor: options.annotation.iconColor,\n  //       query: query\n  //     },\n  //     rangeRaw: options.rangeRaw\n  //   };\n\n  //   return this.doRequest({\n  //     url: '/annotations',\n  //     method: 'POST',\n  //     data: annotationQuery\n  //   }).then(result => {\n  //     return result.data;\n  //   });\n  // }\n\n\n  getOrganizations() {\n    return this.doRequest({\n      url: '/accounts/api/me',\n      method: 'GET'\n    }).then((response) => {\n      this.organizations = response.data.user.memberOfOrganizations.map((o) => {\n        this.organizationNames[o.id] = o.name;\n        return { text: o.name, value: o.id }\n      })\n      return this.organizations\n    });\n  }\n  getEnvironments(organization) {\n    if (this.environments[organization]) {\n      return new Promise((resolve, reject) => {\n        resolve(this.environments[organization])\n      })\n    }\n    this.currentOrganization = organization;\n    organization = this.templateSrv.replace(organization, null, 'regex')\n    return this.doRequest({\n      url: '/accounts/api/organizations/' + organization + '/environments',\n      method: 'GET'\n    }).then((response) => {\n      this.environments[organization] = response.data.data.map((o) => {\n        this.environmentNames[o.id] = o.name\n        return { text: o.name, value: o.id }\n      })\n      return this.environments[organization];\n    });\n  }\n\n  mapToTextValue(result) {\n    if (typeof result === 'object' && !Array.isArray(result)) {\n      result = result.data;\n    }\n    return _.map(result, (d, i) => {\n      if (d && d.id && d.name) {\n        return { text: d.name, value: d.id };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.headers = options.headers || {}\n    if (!options.url.endsWith('/accounts/login')) {\n      if (this.accessToken == null) {\n        this.login()\n      }\n      if (this.accessToken === '') {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            this.doRequest(options).then(resolve).catch(reject)\n          }, 1000)\n        })\n      }\n      options.headers['Authorization'] = 'bearer ' + this.accessToken\n    }\n    for (let x in this.headers) {\n      options.headers[x] = this.headers[x]\n    }\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options)\n  }\n\n  // buildQueryParameters(options) {\n  //   //remove placeholder targets\n  //   options.targets = _.filter(options.targets, target => {\n  //     return target.target !== 'select metric';\n  //   });\n\n  //   var targets = _.map(options.targets, target => {\n  //     return {\n  //       target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n  //       refId: target.refId,\n  //       hide: target.hide,\n  //       type: target.type || 'timeserie'\n  //     };\n  //   });\n\n  //   options.targets = targets;\n\n  //   return options;\n  // }\n\n  // getTagKeys(options) {\n  //   return new Promise((resolve, reject) => {\n  //     this.doRequest({\n  //       url: '/tag-keys',\n  //       method: 'POST',\n  //       data: options\n  //     }).then(result => {\n  //       return resolve(result.data);\n  //     });\n  //   });\n  // }\n\n  // getTagValues(options) {\n  //   return new Promise((resolve, reject) => {\n  //     this.doRequest({\n  //       url: '/tag-values',\n  //       method: 'POST',\n  //       data: options\n  //     }).then(result => {\n  //       return resolve(result.data);\n  //     });\n  //   });\n  // }\n\n}\n"]}