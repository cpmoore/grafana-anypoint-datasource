{"version":3,"sources":["../src/datasource.js"],"names":["JSONPath","require","jsonQueryExpression","value","variable","defaultFormatFn","JSON","stringify","asJsonArray","string","parse","e","Array","isArray","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authData","username","jsonData","password","name","q","accessToken","headers","environmentList","organizationCache","namesById","idsByName","list","environmentCache","monitorCache","loginTimer","setTimeout","loginOrRetry","loading","login","then","response","status","query","interpolated","target","replace","doRequest","data","method","mapToTextValue","loadingProfile","options","start","targets","filter","t","hide","_","isEmpty","when","Date","getTime","isBusy","Promise","resolve","reject","catch","allQueryPromise","map","resource","resourceTypes","Set","scopedVars","z","add","toUpperCase","includeResourceType","x","has","jsonPath","doRuntimeManagerResourceQuery","doAccountResourceQuery","doRuntimeManagerMetricQuery","all","responseList","result","forEach","y","push","console","log","promiseMapper","targetOrganizations","organization","targetEnvironments","environment","includes","Object","keys","checked","promises","i1","cache","orgName","myTargets","i2","get","envName","error","length","obj","org","env","statues","i","statusCode","organizationId","environmentId","array","alreadyAttemptedToLoad","getMonitorResourceIds","arguments","key","ids","getRuntimeManagerResourceList","hasOwnProperty","id","rows","deployments","deployment","artifact","lastReportedStatus","APPLICATION","addStatusCodeForTarget","details","servers","server","SERVER","parent","parentType","addresses","err","aggregation","toLowerCase","loadSet","metricList","metric","split","endpoint","promiseMultipleEnvironments","metricTarget","serverIds","range","from","toISOString","to","set","trim","metrics","points","values","m","time","unix","createMetricLabel","legendFormat","datapoints","sort","a","b","aliasPattern","aliasData","aliasRegex","match","g1","format","s","substring","renderTemplate","columns","getMyProfile","user","memberOfOrganizations","getEnvironments","envs","resourceType","text","path","json","returnFullResponse","clearTimeout","access_token","r","expires_in","message","includeEnvironments","o","targetOrganization","d","isObject","isLogin","endsWith","datasourceRequest","Error","config"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from 'moment'\n\nconst JSONPath = require('./lib/jsonpath-plus.min.js').JSONPath;\n\nfunction jsonQueryExpression(value, variable, defaultFormatFn) {\n    if (typeof value === 'string') {\n        return value;\n    }\n    return JSON.stringify(value);\n}\n\nfunction asJsonArray(string) {\n    if (typeof string === 'string') {\n        try {\n            return JSON.parse(string)\n        } catch (e) {\n            return [string]\n        }\n    } else if (Array.isArray(string)) {\n        return string;\n    }\n    return [string]\n}\n\n\n\nexport class GenericDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.authData = {username: instanceSettings.jsonData.username, password: instanceSettings.jsonData.password}\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.accessToken = null;\n        this.headers = {'Content-Type': 'application/json', 'Accept': 'application/json'};\n        this.environmentList = {}\n        this.organizationCache = {namesById: {}, idsByName: {}, list: []}\n        this.environmentCache = {}\n        this.monitorCache = {}\n        this.loginTimer = setTimeout(() => {\n            this.loginOrRetry()\n        }, 100)\n        this.loading = 0\n    }\n\n    loginOrRetry() {\n        this.login().then((response) => {\n            if (response.status === 'failure') {\n                this.loginTimer = setTimeout(() => {\n                    this.loginOrRetry()\n                }, 5000)\n            }\n        })\n    }\n\n    metricFindQuery(query) {\n        var interpolated = {\n            target: this.templateSrv.replace(query, null)\n        };\n\n        return this.doRequest({\n            url: '/search',\n            data: interpolated,\n            method: 'POST',\n        }).then(this.mapToTextValue);\n    }\n\n    isBusy() {\n        return this.loadingProfile || !this.accessToken || this.loading > 0\n    }\n\n    query(options, start) {\n        options.targets = options.targets.filter(t => !t.hide);\n        // No valid targets, return the empty result to save a round trip.\n        if (_.isEmpty(options.targets)) {\n            return this.q.when({data: []})\n        }\n        start = start || new Date().getTime();\n        if (this.isBusy()) {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.query(options, start).then(resolve).catch(reject)\n                }, 1500)\n            })\n        }\n        const allQueryPromise = _.map(options.targets, target => {\n            if (target.resource) {\n                target.resourceTypes = new Set();\n                asJsonArray(this.templateSrv.replace(target.resource, options.scopedVars, jsonQueryExpression)).map(function (z) {\n                    target.resourceTypes.add(z.toUpperCase())\n                });\n                target.includeResourceType = function (x) {\n                    return target.resourceTypes.has(x) || target.resourceTypes.has('ALL')\n                }\n            }\n            if (target.jsonPath) {\n                target.jsonPath = this.templateSrv.replace(target.jsonPath, options.scopedVars, 'regex');\n            }\n\n            if (target.type === 'RUNTIME_MANAGER_RESOURCES') {\n                return this.doRuntimeManagerResourceQuery(target, options)\n            } else if (target.type === 'ACCOUNT_RESOURCES') {\n                return this.doAccountResourceQuery(target, options)\n            } else if (target.type === 'RUNTIME_MANAGER_METRICS') {\n                return this.doRuntimeManagerMetricQuery(target, options)\n            } else {\n                return this.q.when([])\n            }\n        });\n        return this.q.all(allQueryPromise).then((responseList) => {\n            let result = {data: []};\n            responseList.forEach((response) => {\n                if (!response) {\n                    return;\n                }\n                if (Array.isArray(response)) {\n                    response.forEach((y) => {\n                        if (Array.isArray(y)) {\n                            result.data = [...result.data, ...y]\n                        } else {\n                            result.data.push(y)\n                        }\n                    });\n\n                } else {\n                    result.data.push(response)\n                }\n            });\n            console.log('Queries finished after ->', new Date().getTime() - start, result)\n            return result\n        })\n    }\n\n    promiseMultipleEnvironments(options, promiseMapper) {\n        return new Promise((resolve, reject) => {\n            let targetOrganizations = asJsonArray(this.templateSrv.replace(options.organization, options.scopedVars, jsonQueryExpression));\n            let targetEnvironments = asJsonArray(this.templateSrv.replace(options.environment, options.scopedVars, jsonQueryExpression));\n            if (targetOrganizations.includes('*')) {\n                targetOrganizations = Object.keys(this.organizationCache.namesById)\n            }\n\n\n            let checked = new Set();\n            let promises = []\n            for (let i1 = 0; i1 < targetOrganizations.length; i1++) {\n                let organization = this.organizationCache.idsByName[targetOrganizations[i1]] || targetOrganizations[i1]\n                //organization does not exist\n                let cache = this.environmentCache[organization]\n                if (!cache) {\n                    console.log('Organization ' + organization + ' does not exist')\n                    continue;\n                }\n                let orgName = this.organizationCache.namesById[organization];\n                let myTargets = targetEnvironments;\n                if (myTargets.includes('*')) {\n                    myTargets = Object.keys(this.environmentCache[organization].namesById)\n                }\n                for (let i2 = 0; i2 < myTargets.length; i2++) {\n                    let environment = _.get(this.environmentCache, [organization, 'idsByName', myTargets[i2]]) || myTargets[i2];\n                    if (checked.has(organization + '|' + environment)) {\n                        continue;\n                    }\n                    let envName = this.environmentCache[organization].namesById[environment];\n                    checked.add(organization + '|' + environment)\n                    if (!cache.idsByName[environment] && !cache.namesById[environment]) {\n                        // console.log('Environment ' + environment + ' is not part of organization ' + organization, 'environment in organization are', cache.idsByName)\n                        continue\n                    }\n                    promises.push(new Promise((resolve, reject) => {\n                        Promise.resolve(promiseMapper(organization, environment, orgName, envName)).then(resolve).catch((error) => {\n                            console.log(\"Could not get information for organization \" + orgName + \", environment \" + envName, error)\n                            resolve(null)\n                        })\n                    }))\n                }\n            }\n            this.q.all(promises).then(resolve)\n        })\n    }\n\n    addStatusCodeForTarget(obj, org, env) {\n        let statues = ['RUNNING', 'STARTED', 'DISCONNECTED', 'STOPPED', 'DEPLOYMENT_FAILED']\n        let i;\n        for (i = 0; i < statues.length; i++) {\n            if (obj.status === statues[i]) {\n                break;\n            }\n        }\n        obj.statusCode = i + 1;\n        obj.organizationId = org\n        obj.environmentId = env\n        obj.organization = this.organizationCache.namesById[obj.organizationId]\n        obj.environment = this.environmentCache[org].namesById[obj.environmentId]\n        return obj;\n    }\n\n    getMonitorResourceIds(array, org, env, resource,alreadyAttemptedToLoad) {\n        console.log(\"getting\",resource,\"ids for \",array,alreadyAttemptedToLoad)\n\n        if (this.isBusy()) {\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.getMonitorResourceIds(...arguments).then(resolve).catch(reject)\n                }, 1500)\n            })\n        }\n        alreadyAttemptedToLoad = alreadyAttemptedToLoad || new Set();\n        return new Promise((resolve, reject) => {\n            let key = org + '|' + env;\n            let ids = []\n\n            for (let i = 0; i < array.length; i++) {\n                let y = array[i];\n                if (!_.get(this.monitorCache, [org, env, resource])) {\n                    if (alreadyAttemptedToLoad.has(key)) {\n                        continue;\n                    }\n                    alreadyAttemptedToLoad.add(key)\n                    console.log(\"trying to load \", org, env)\n                    this.getRuntimeManagerResourceList(org, env).then(() => {\n                        this.getMonitorResourceIds(...arguments).then(resolve).catch(reject)\n                    })\n                    return\n                }\n\n                if (this.monitorCache[org][env][resource].namesById.hasOwnProperty(y)) {\n                    ids.push(y)\n                    continue;\n                }\n                let id = this.monitorCache[org][env][resource].idsByName[y]\n                if (id) {\n                    ids.push(id)\n                }else if (!alreadyAttemptedToLoad.has(key)) {\n                    alreadyAttemptedToLoad.add(key)\n                    this.getRuntimeManagerResourceList(org, env).then(() => {\n                        this.getMonitorResourceIds(...arguments).then(resolve).catch(reject)\n                    })\n                }\n            }\n            resolve(ids)\n        })\n    }\n\n    getRuntimeManagerResourceList(org, env) {\n        this.loading++;\n        return this.doRequest({\n            url: '/armui/api/v1/servers',\n            headers: {\n                'X-ANYPNT-ORG-ID': org,\n                'X-ANYPNT-ENV-ID': env\n            }\n        }).then((data) => {\n            data = _.get(data, ['data', 'data'])\n            if (!data || !data.length) {\n                this.loading--;\n                return []\n            }\n            if (!this.monitorCache.hasOwnProperty(org)) {\n                this.monitorCache[org] = {}\n            }\n            this.monitorCache[org][env] = {'SERVER':{idsByName: {}, namesById: {}},'APPLICATION':{idsByName: {}, namesById: {}}}\n            let rows = []\n            for (let i = 0; i < data.length; i++) {\n                let deployments = data[i].deployments || []\n                for (let i2 = 0; i2 < deployments.length; i2++) {\n                    let deployment = deployments[i2].artifact;\n                    deployment.status = deployments[i2].lastReportedStatus;\n                    deployment.id = deployments[i2].id;\n                    deployment.type = 'APPLICATION'\n                    this.monitorCache[org][env].APPLICATION.namesById[deployment.id] = deployment.name\n                    this.monitorCache[org][env].APPLICATION.idsByName[deployment.name] = deployment.id\n                    rows.push(this.addStatusCodeForTarget(deployment, org, env))\n                }\n\n                if (data[i].details && data[i].details.servers) {\n                    let servers = data[i].details.servers;\n                    for (let i2 = 0; i2 < servers.length; i2++) {\n                        let server = servers[i2].details;\n                        server.id = servers[i2].id;\n                        server.name = servers[i2].name;\n                        this.monitorCache[org][env].SERVER.namesById[server.id] = server.name\n                        this.monitorCache[org][env].SERVER.idsByName[server.name] = server.id\n                        server.status = servers[i2].status;\n                        server.type = 'SERVER';\n                        server.parent = data[i].name;\n                        server.parentType = data[i].type\n                        server.addresses = JSON.stringify(server.addresses)\n                        rows.push(this.addStatusCodeForTarget(server, org, env))\n                    }\n                }\n                rows.push(this.addStatusCodeForTarget(data[i], org, env))\n            }\n            this.loading--;\n            return rows;\n        }).catch((err) => {\n            this.loading--;\n            return []\n        })\n    }\n\n    doRuntimeManagerMetricQuery(target, options) {\n\n        target.aggregation = (target.aggregation || 'avg').toLowerCase()\n        let loadSet = new Set();\n        let metricList=[]\n        asJsonArray(this.templateSrv.replace(target.metric, options.scopedVars, jsonQueryExpression)).forEach((y) => {\n            metricList=[...metricList,...y.split(',')]\n        });\n        let response = []\n        let endpoint=(target.resource==='SERVER'?'targets':'applications')\n        return this.promiseMultipleEnvironments({\n            scopedVars: options.scopedVars,\n            environment: target.environment,\n            organization: target.organization\n        }, (org, env) => {\n            return this.getMonitorResourceIds(asJsonArray(this.templateSrv.replace(target.metricTarget, options.scopedVars, jsonQueryExpression)), org, env,target.resource, loadSet).then((serverIds) => {\n\n                return this.doRequest({\n                    url: '/monitoring/query/api/v1/organizations/' + org + '/environments/' + env + '/'+endpoint+'?from=' + options.range.from.toISOString() + '&to=' + options.range.to.toISOString() + '&detailed=true',\n                    method: 'POST',\n                    data: {\"ids\": serverIds}\n                }).then((data) => {\n                    data=data.data[endpoint]\n                    let set=new Set()\n                    for (let z = 0; z < metricList.length; z++) {\n                        let metric=metricList[z].trim()\n                        if(set.has(metric)){\n                            continue\n                        }\n                        set.add(metric)\n                        for (let i = 0; i < data.length; i++) {\n                            let y = data[i];\n                            if(!y.metrics[metric]){\n                                continue;\n                            }\n                            let points = []\n                            for(let i1=0;i1<y.metrics[metric].values.length;i1++) {\n                                let m=y.metrics[metric].values[i1]\n                                let time = +(moment(m.time).unix() + '000');\n                                points.push([m[target.aggregation], time])\n                            }\n                            response.push({\n                                target: this.createMetricLabel({\n                                    'metric':metric,\n                                    'aggregation':target.aggregation,\n                                    'resource':this.monitorCache[org][env][target.resource].namesById[y.id],\n                                    'organization':this.organizationCache.namesById[org],\n                                    'environment':this.environmentCache[org].namesById[env]\n                                },target.legendFormat),\n                                datapoints: points.sort((a, b) => a[1] - b[1])\n                            })\n                        }\n                    }\n                    return response;\n                })\n            }).catch((e) => {\n                console.log(e)\n                return response;\n            })\n        })\n    }\n    renderTemplate(aliasPattern, aliasData) {\n        const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n        return aliasPattern.replace(aliasRegex, (match, g1) => {\n            if (aliasData[g1]) {\n                return aliasData[g1];\n            }\n            return g1;\n        });\n    }\n    createMetricLabel(z,format){\n        if(!format){\n            let s='';\n            for(let y in z){\n                s+=y+'='+JSON.stringify(z[y])+', '\n            }\n            return \"{\"+s.substring(0,s.length-2)+\"}\"\n        }\n        return this.renderTemplate(this.templateSrv.replace(format), z);\n    }\n    doAccountResourceQuery(target, options) {\n        let targetOrganizations = asJsonArray(this.templateSrv.replace(target.organization, options.scopedVars, jsonQueryExpression));\n        if (targetOrganizations.includes('*')) {\n            targetOrganizations = Object.keys(this.organizationCache.namesById)\n        }\n        let columns = ['name', 'id', 'clientId', 'resourceType']\n        let rows = []\n        return this.getMyProfile(false).then((response) => {\n            let list = response.data.user.memberOfOrganizations\n            if (target.includeResourceType('ORGANIZATION')) {\n                for (let i = 0; i < list.length; i++) {\n                    if (targetOrganizations.includes(list[i].id) || targetOrganizations.includes(list[i].name)) {\n                        rows.push(list[i])\n                    }\n                }\n                columns = [...columns, ...[\n                    'createdAt', 'domain', 'idprovider_id', 'isFederated',\n                    'isMaster', 'ownerId', 'parentId', 'parentName', 'updatedAt',\n                    'parentOrganizationIds', 'subOrganizationIds', 'tenantOrganizationIds'\n                ]]\n            }\n            let promises = []\n            if (target.includeResourceType('ENVIRONMENT')) {\n                columns = [...columns, ...[\n                    'organization',\n                    'organizationId',\n                    'isProduction',\n                    'type'\n                ]]\n                for (let i = 0; i < list.length; i++) {\n                    if (targetOrganizations.includes(list[i].id) || targetOrganizations.includes(list[i].name)) {\n                        promises.push(this.getEnvironments(list[i].id))\n                    }\n                }\n            }\n            return this.q.all(promises).then((x) => {\n                for (let i = 0; i < x.length; i++) {\n\n                    let envs = x[i].data.data\n                    for (let i2 = 0; i2 < envs.length; i2++) {\n                        let env = envs[i2]\n                        env.resourceType = 'ENVIRONMENT'\n                        env.organization = this.organizationCache.namesById[env.organizationId]\n                        rows.push(env)\n                    }\n                }\n                columns = columns.map((x, i) => {\n                    if (typeof x === 'string') {\n                        return {text: x, type: 'string'}\n                    }\n                })\n                if (target.jsonPath) {\n                    rows = JSONPath({path: target.jsonPath, json: rows})\n                }\n                if (options.returnFullResponse) {\n                    return rows;\n                }\n                let response = {\n                    columns: columns,\n                    rows: rows.map((obj) => {\n                        return columns.map(x => obj[x.text] || '')\n                    }),\n                    type: 'table'\n                }\n                return response\n            })\n        })\n    }\n\n\n    doRuntimeManagerResourceQuery(target, options) {\n        let columns = [\n            {'text': 'type', 'type': 'string'},\n            {'text': 'name', 'type': 'string'},\n            {'text': 'organization', 'type': 'string'},\n            {'text': 'environment', 'type': 'string'},\n            {'text': 'status', 'type': 'string'},\n            {'text': 'id', 'type': 'string'},\n            {'text': 'organizationId', 'type': 'string'},\n            {'text': 'environmentId', 'type': 'string'},\n            {'text': 'statusCode', 'type': 'number'}\n        ]\n        if (target.includeResourceType('APPLICATION')) {\n            columns = [...columns,\n                {'text': 'fileChecksum', 'type': 'string'},\n                {'text': 'fileName', 'type': 'string'},\n                {'text': 'lastUpdateTime', 'type': 'string'}\n            ]\n        }\n        if (target.includeResourceType('SERVER')) {\n            columns = [\n                ...columns,\n                {'text': 'agentVersion', 'type': 'string'},\n                {'text': 'runtimeVersion', 'type': 'string'},\n                {'text': 'currentClusteringIp', 'type': 'string'},\n                {'text': 'addresses', 'type': 'string'},\n                {'text': 'parent', 'type': 'string'},\n                {'text': 'parentType', 'type': 'string'}\n            ]\n        }\n        return this.promiseMultipleEnvironments({\n            scopedVars: options.scopedVars,\n            environment: target.environment,\n            organization: target.organization\n        }, (org, env) => {\n            let response = {columns: columns, rows: [], type: 'table'}\n            return this.getRuntimeManagerResourceList(org, env).then((rows) => {\n                if (!target.resourceTypes.has('ALL')) {\n                    rows = rows.filter(function (y) {\n                        return target.resourceTypes.has(y.type)\n                    })\n                }\n                if (target.jsonPath) {\n                    rows = JSONPath({path: target.jsonPath, json: rows});\n                }\n                if (options.returnFullResponse) {\n                    return rows;\n                }\n                response.rows = rows.map((obj) => columns.map(x => obj[x.text]));\n                return response;\n            }).catch(() => {\n                return response;\n            })\n        })\n    }\n\n    login() {\n        clearTimeout(this.loginTimer)\n        console.log('Getting access token')\n        this.accessToken = ''\n        return this.doRequest({\n            url: '/accounts/login',\n            method: 'POST',\n            data: this.authData\n        }).then(response => {\n            this.accessToken = response.data.access_token\n            return this.getMyProfile().then((r) => {\n                r = r.data.access_token;\n                let time = 1000 * (r.expires_in) - 30\n                if (time < 10000) {\n                    time = 10000\n                }\n                console.log(\"reauthenticating in\", time)\n                this.loginTimer = setTimeout(() => {\n                    this.loginOrRetry()\n                }, time)\n                return {\n                    status: \"success\",\n                    message: \"Data source is working, found \" + this.organizationCache.list.length + \" organizations\"\n                };\n            })\n        }).catch((error) => {\n            this.accessToken = null\n            return {status: \"failure\", message: \"Invalid url or credentials.\"};\n        })\n    }\n\n    testDatasource() {\n        return this.login();\n    }\n\n    getMyProfile(includeEnvironments) {\n        this.loadingProfile = true;\n        return this.doRequest({\n            url: '/accounts/api/me',\n            method: 'GET'\n        }).then((response) => {\n            this.organizationCache.list = response.data.user.memberOfOrganizations.map((o, i) => {\n                response.data.user.memberOfOrganizations[i].resourceType = 'ORGANIZATION'\n                this.organizationCache.idsByName[o.name] = o.id;\n                this.organizationCache.namesById[o.id] = o.name;\n                if (includeEnvironments !== false) {\n                    this.getEnvironments(o.id);\n                }\n                return {text: o.name, value: o.id}\n            })\n            this.loadingProfile = false;\n            return response;\n        });\n    }\n\n    getEnvironments(targetOrganization) {\n        this.loading++;\n        let organization = this.templateSrv.replace(targetOrganization, null)\n        if (targetOrganization !== organization && this.organizationCache.idsByName[organization]) {\n            organization = this.organizationCache.idsByName[organization]\n        }\n        return this.doRequest({\n            url: '/accounts/api/organizations/' + organization + '/environments',\n            method: 'GET'\n        }).then((response) => {\n            this.environmentCache[organization] = {idsByName: {}, namesById: {}}\n            this.environmentList[organization] = [\n                {'text': 'All', value: '*'},\n                ...response.data.data.map((o) => {\n                    this.environmentCache[organization].idsByName[o.name] = o.id;\n                    this.environmentCache[organization].namesById[o.id] = o.name\n                    return {text: o.name, value: o.name}\n                })]\n            this.loading--;\n            this.environmentList[organization];\n            return response;\n        }).catch((err) => {\n            this.loading--;\n            throw err;\n        });\n    }\n\n    mapToTextValue(result) {\n        if (typeof result === 'object' && !Array.isArray(result)) {\n            result = result.data;\n        }\n        return _.map(result, (d, i) => {\n            if (d && d.id && d.name) {\n                return {text: d.name, value: d.id};\n            } else if (_.isObject(d)) {\n                return {text: d, value: i};\n            }\n            return {text: d, value: d};\n        });\n    }\n\n    doRequest(options) {\n        options.headers = options.headers || {}\n        let isLogin = true;\n        if (!options.url.endsWith('/accounts/login')) {\n            isLogin = false;\n            if (this.accessToken == null) {\n                this.login()\n            }\n            if (this.accessToken === '') {\n                return new Promise((resolve, reject) => {\n                    setTimeout(() => {\n                        this.doRequest(options).then(resolve).catch(reject)\n                    }, 1000)\n                })\n            }\n            options.headers['Authorization'] = 'bearer ' + this.accessToken\n        }\n        for (let x in this.headers) {\n            options.headers[x] = this.headers[x]\n        }\n        options.url = this.url + options.url;\n        return this.backendSrv.datasourceRequest(options).then((data) => {\n            if (!data) {\n                throw new Error('No response received, possible invalid organization or environment.')\n            } else if (data.status !== 200) {\n                throw new Error(\"Status code \" + data.status + \" received\")\n            }\n            return data\n        }).catch((error) => {\n            if (error && error.config && error.config.headers) {\n                error.config.headers['X-DS-Authorization'] = '****'\n            }\n            options.headers['X-DS-Authorization'] = '****'\n            options.headers['Authorization'] = '****'\n            if (isLogin) {\n                console.log(\"Got error from login request\", error)\n            } else {\n                console.log('Got error from request', options, error)\n            }\n            throw error;\n        })\n    }\n\n    // buildQueryParameters(options) {\n    //   //remove placeholder targets\n    //   options.targets = _.filter(options.targets, target => {\n    //     return target.target !== 'select metric';\n    //   });\n\n    //   var targets = _.map(options.targets, target => {\n    //     return {\n    //       target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n    //       refId: target.refId,\n    //       hide: target.hide,\n    //       type: target.type || 'timeserie'\n    //     };\n    //   });\n\n    //   options.targets = targets;\n\n    //   return options;\n    // }\n\n    // getTagKeys(options) {\n    //   return new Promise((resolve, reject) => {\n    //     this.doRequest({\n    //       url: '/tag-keys',\n    //       method: 'POST',\n    //       data: options\n    //     }).then(result => {\n    //       return resolve(result.data);\n    //     });\n    //   });\n    // }\n\n    // getTagValues(options) {\n    //   return new Promise((resolve, reject) => {\n    //     this.doRequest({\n    //       url: '/tag-values',\n    //       method: 'POST',\n    //       data: options\n    //     }).then(result => {\n    //       return resolve(result.data);\n    //     });\n    //   });\n    // }\n\n}\n"]}