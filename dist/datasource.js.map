{"version":3,"sources":["../src/datasource.js"],"names":["JSONPath","require","jsonQueryExpression","value","variable","defaultFormatFn","JSON","stringify","asJsonArray","string","parse","e","Array","isArray","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","authData","username","jsonData","password","name","q","accessToken","headers","environmentList","organizationCache","namesById","idsByName","list","environmentCache","loginTimer","setTimeout","loginOrRetry","loadingEnvironment","login","then","response","status","query","interpolated","target","replace","doRequest","data","method","mapToTextValue","loadingProfile","options","isBusy","Promise","resolve","reject","catch","_","isEmpty","targets","when","allQueryPromise","map","doRuntimeManagerResourceQuery","doAccountResourceQuery","all","responseList","result","each","index","push","promiseMapper","targetOrganizations","organization","scopedVars","targetEnvironments","environment","includes","Object","keys","checked","Set","promises","i1","length","cache","console","log","myTargets","i2","get","has","add","resourceTypes","resource","z","toUpperCase","include","x","jsonPath","columns","rows","getMyProfile","orgs","user","memberOfOrganizations","includesOrganziation","i","id","getEnvironments","envs","env","resourceType","organizationId","text","path","json","obj","promiseMultipleEnvironments","config","addOne","statues","statusCode","environmentId","deployments","deployment","artifact","lastReportedStatus","details","servers","server","parent","parentType","addresses","error","clearTimeout","message","access_token","r","time","expires_in","err","includeEnvironments","o","targetOrganization","d","isObject","endsWith","datasourceRequest","Error"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nconst JSONPath = require('./lib/jsonpath-plus.min.js').JSONPath;\n\nfunction jsonQueryExpression(value, variable, defaultFormatFn) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return JSON.stringify(value);\n}\nfunction asJsonArray(string) {\n  if (typeof string === 'string') {\n    try {\n      return JSON.parse(string)\n    } catch (e) {\n      return [string]\n    }\n  } else if (Array.isArray(string)) {\n    return string;\n  }\n  return [string]\n}\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.authData = { username: instanceSettings.jsonData.username, password: instanceSettings.jsonData.password }\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.accessToken = null;\n    this.headers = { 'Content-Type': 'application/json', 'Accept': 'application/json' };\n    this.environmentList = {}\n    this.organizationCache = { namesById: {}, idsByName: {}, list: [] }\n    this.environmentCache = {}\n    this.loginTimer = setTimeout(() => { this.loginOrRetry() }, 100)\n    this.loadingEnvironment = 0\n  }\n  loginOrRetry() {\n    this.login().then((response) => {\n      if (response.status === 'failure') {\n        this.loginTimer = setTimeout(() => { this.loginOrRetry() }, 5000)\n      }\n    })\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null)\n    };\n\n    return this.doRequest({\n      url: '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n  isBusy() {\n    return this.loadingProfile || !this.accessToken || this.loadingEnvironment > 0\n  }\n  query(options) {\n    if (this.isBusy()) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.query(options).then(resolve).catch(reject)\n        }, 1500)\n      })\n    }\n    // No valid targets, return the empty result to save a round trip.\n    if (_.isEmpty(options.targets)) {\n      return this.$q.when({ data: [] })\n    }\n\n    const allQueryPromise = _.map(options.targets, target => {\n      if (target.type === 'RUNTIME_MANAGER_RESOURCES') {\n        return this.doRuntimeManagerResourceQuery(target, options)\n      } else if (target.type === 'ACCOUNT_RESOURCES') {\n        return this.doAccountResourceQuery(target, options)\n      } else {\n        return new Promise(function (resolve, reject) {\n          return resolve([])\n        })\n      }\n    });\n    return this.q.all(allQueryPromise).then((responseList) => {\n      let result = { data: [] };\n      _.each(responseList, (response, index) => {\n        if (Array.isArray(response)) {\n          result.data = [...result.data, ...response]\n        } else {\n          result.data.push(response)\n        }\n      });\n      return result\n    })\n  }\n  promiseMultipleEnvironments(target, options, promiseMapper) {\n    return new Promise((resolve, reject) => {\n      let targetOrganizations = asJsonArray(this.templateSrv.replace(target.organization, options.scopedVars, jsonQueryExpression));\n      let targetEnvironments = asJsonArray(this.templateSrv.replace(target.environment, options.scopedVars, jsonQueryExpression));\n      if (targetOrganizations.includes('*')) {\n        targetOrganizations = Object.keys(this.organizationCache.namesById)\n      }\n\n\n      let checked = new Set();\n      let promises = []\n      for (let i1 = 0; i1 < targetOrganizations.length; i1++) {\n        let organization = this.organizationCache.idsByName[targetOrganizations[i1]] || targetOrganizations[i1]\n\n        //organization does not exist\n        let cache = this.environmentCache[organization]\n        if (!cache) {\n          console.log('Organization ' + organization + ' does not exist')\n          continue;\n        }\n        let myTargets = targetEnvironments;\n        if (myTargets.includes('*')) {\n          myTargets = Object.keys(this.environmentCache[organization].namesById)\n        }\n        for (let i2 = 0; i2 < myTargets.length; i2++) {\n          let environment = _.get(this.environmentCache, [organization, 'idsByName', myTargets[i2]]) || myTargets[i2];\n          if (checked.has(organization + '|' + environment)) {\n            continue;\n          }\n          checked.add(organization + '|' + environment)\n          if (!cache.idsByName[environment] && !cache.namesById[environment]) {\n            console.log('Environment ' + environment + ' is not part of organization ' + organization, 'environment in organization are', cache.idsByName)\n            continue\n          }\n          promises.push(promiseMapper(organization, environment, this.organizationCache.namesById[organization], this.environmentCache[organization].namesById[environment]))\n        }\n      }\n      this.q.all(promises).then(resolve).catch(reject)\n    })\n\n  }\n  doAccountResourceQuery(target, options) {\n\n    let resourceTypes = new Set();\n    asJsonArray(this.templateSrv.replace(target.resource, options.scopedVars, jsonQueryExpression)).map(function (z) {\n      resourceTypes.add(z.toUpperCase())\n    });\n    function include(x) {\n      return resourceTypes.has(x) || resourceTypes.has('ALL')\n    }\n\n    let targetOrganizations = asJsonArray(this.templateSrv.replace(target.organization, options.scopedVars, jsonQueryExpression));\n    if (targetOrganizations.includes('*')) {\n        targetOrganizations = Object.keys(this.organizationCache.namesById)\n    }\n    let jsonPath = this.templateSrv.replace(target.jsonPath, options.scopedVars, 'regex');\n    let columns = ['name', 'id', 'clientId','resourceType']\n    let rows = []\n    return this.getMyProfile(false).then((response) => {\n      let orgs = response.data.user.memberOfOrganizations\n      let includesOrganziation = false\n      if (include('ORGANIZATION')) {\n        includesOrganziation = true;\n        rows=[...orgs]\n        columns = [...columns, ...[\n          'createdAt', 'domain', 'idprovider_id', 'isFederated',\n          'isMaster', 'ownerId', 'parentId', 'parentName', 'updatedAt',\n          'parentOrganizationIds', 'subOrganizationIds', 'tenantOrganizationIds'\n        ]]\n      }\n      let promises = []\n      if (include('ENVIRONMENT')) {\n        columns = [...columns, ...[\n          'organization',\n          'organizationId',\n          'isProduction',\n          'type'\n        ]]\n        for (let i = 0; i < orgs.length; i++) {          \n          if(targetOrganizations.includes(orgs[i].id)||targetOrganizations.includes(orgs[i].name)){\n             promises.push(this.getEnvironments(orgs[i].id))\n          }\n        }\n      }\n      return this.q.all(promises).then((x) => {\n        \n        for (let i = 0; i < x.length; i++) {\n          \n          let envs = x[i].data.data\n          for (let i2 = 0; i2 < envs.length; i2++) {\n            let env = envs[i2]\n            env.resourceType='ENVIRONMENT'\n            env.organization = this.organizationCache.namesById[env.organizationId]\n            rows.push(env)\n          }\n        }\n        columns = columns.map((x, i) => {\n          if (typeof x === 'string') {\n            return { text: x, type: 'string' }\n          }\n        })\n        if (jsonPath) {\n          rows = JSONPath({ path: jsonPath, json: rows })\n        }\n        let response = {\n          columns: columns,\n          rows: rows.map((obj) => {\n            return columns.map(x => obj[x.text] || '')\n          }),\n          type: 'table'\n        }\n        return response\n      })\n    })\n  }\n  doRuntimeManagerResourceQuery(target, options) {\n    let resourceTypes = new Set();\n    asJsonArray(this.templateSrv.replace(target.resource, options.scopedVars, jsonQueryExpression)).map(function (z) {\n      resourceTypes.add(z.toUpperCase())\n    });\n    function include(x) {\n      return resourceTypes.has(x) || resourceTypes.has('ALL')\n    }\n    let jsonPath = this.templateSrv.replace(target.jsonPath, options.scopedVars, 'regex');\n    let organizationCache = this.organizationCache\n    let environmentCache = this.environmentCache\n    return this.promiseMultipleEnvironments(target, options, (organization, environment) => {\n      return this.doRequest({\n        url: '/armui/api/v1/servers',\n        headers: {\n          'X-ANYPNT-ORG-ID': organization,\n          'X-ANYPNT-ENV-ID': environment\n        }\n      })\n    }).then((responseList) => {\n      return responseList.map((data) => {\n        let organization = data.config.headers['X-ANYPNT-ORG-ID']\n        let environment = data.config.headers['X-ANYPNT-ENV-ID']\n        data = data.data.data\n\n        let columns = [\n          { 'text': 'type', 'type': 'string' },\n          { 'text': 'name', 'type': 'string' },\n          { 'text': 'organization', 'type': 'string' },\n          { 'text': 'environment', 'type': 'string' },\n          { 'text': 'status', 'type': 'string' },\n          { 'text': 'id', 'type': 'string' },\n          { 'text': 'organizationId', 'type': 'string' },\n          { 'text': 'environmentId', 'type': 'string' },\n          { 'text': 'statusCode', 'type': 'number' }\n        ]\n        if (include('APPLICATION')) {\n          columns = [...columns,\n          { 'text': 'fileChecksum', 'type': 'string' },\n          { 'text': 'fileName', 'type': 'string' },\n          { 'text': 'lastUpdateTime', 'type': 'string' }\n          ]\n        }\n        if (include('SERVER')) {\n          columns = [\n            ...columns,\n            { 'text': 'agentVersion', 'type': 'string' },\n            { 'text': 'runtimeVersion', 'type': 'string' },\n            { 'text': 'currentClusteringIp', 'type': 'string' },\n            { 'text': 'addresses', 'type': 'string' },\n            { 'text': 'parent', 'type': 'string' },\n            { 'text': 'parentType', 'type': 'string' }\n          ]\n        }\n        let rows = []\n\n\n        function addOne(obj) {\n          let statues = ['RUNNING', 'STARTED', 'DISCONNECTED', 'STOPPED', 'DEPLOYMENT_FAILED']\n          let i;\n          for (i = 0; i < statues.length; i++) {\n            if (obj.status === statues[i]) {\n              break;\n            }\n          }\n          obj.statusCode = i + 1;\n          obj.organizationId = organization\n          obj.environmentId = environment\n          obj.organization = organizationCache.namesById[organization]\n          obj.environment = environmentCache[organization].namesById[environment]\n          if (jsonPath) {\n            rows.push(obj)\n          } else {\n            rows.push(columns.map(x => obj[x.text] || ''))\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          if (include('APPLICATION')) {\n            let deployments = data[i].deployments\n            for (let i2 = 0; i2 < deployments.length; i2++) {\n              let deployment = deployments[i2].artifact;\n              deployment.status = deployments[i2].lastReportedStatus;\n              deployment.id = deployments[i2].id;\n              deployment.type = 'APPLICATION'\n              addOne(deployment)\n            }\n          }\n          if (include('SERVER') && data[i].details && data[i].details.servers) {\n            let servers = data[i].details.servers;\n            for (let i2 = 0; i2 < servers.length; i2++) {\n              let server = servers[i2].details;\n              server.id = servers[i2].id;\n              server.name = servers[i2].name;\n              server.status = servers[i2].status;\n              server.type = 'SERVER';\n              server.parent = data[i].name;\n              server.parentType = data[i].type\n              server.addresses = JSON.stringify(server.addresses)\n              addOne(server)\n            }\n          }\n          if (include(data[i].type)) {\n            addOne(data[i])\n          }\n        }\n        if (jsonPath) {\n          rows = JSONPath({ path: jsonPath, json: rows }).map((obj) => {\n            return columns.map(x => obj[x.text] || '')\n          });\n        }\n        return {\n          columns: columns,\n          rows: rows,\n          type: 'table'\n        }\n      })\n    }).catch(function (error) {\n      console.log(error)\n      throw error\n    })\n\n\n    // if (target.type === 'RUNTIME_MANAGER_RESOURCES') {\n    //   return this.doRuntimeManagerResourceQuery(target,options)\n    // } else {\n    //   return new Promise(function (resolve, reject) {\n    //     return resolve([])\n    //   })\n    // }\n\n    // console.log('>>>', targetOrganization, targetEnvironment)\n    // if (targetOrganization !== target.organization) {\n    //   if (this.organizationCache.idsByName[targetOrganization]) {\n    //     targetOrganization = this.organizationCache.idsByName[targetOrganization]\n    //   }\n    // }\n    // if (targetEnvironment !== target.environment) {\n    //   if (_.get(this.environmentCache, [targetOrganization, targetEnvironment])) {\n    //     targetEnvironment = this.environmentCache[targetOrganization][targetEnvironment]\n    //   }\n    // }\n    // if (!targetOrganization || !targetEnvironment || !this.environments[targetOrganization]) {\n    //   return []\n    // }\n\n\n\n\n    // // console.log(filter)\n\n    // return this.doRequest({\n    //   url: '/armui/api/v1/servers',\n    //   headers: {\n    //     'X-ANYPNT-ORG-ID': targetOrganization,\n    //     'X-ANYPNT-ENV-ID': targetEnvironment\n    //   }\n    // }).then((data) => {\n    //   if (!data) {\n    //     throw new Error('No response received, possible invalid organization or environment.')\n    //   } else if (data.status !== 200) {\n    //     throw new Error(\"Status code \" + data.status + \" received\")\n    //   }\n    //   data = data.data.data\n    //   let resource = target.resource.toUpperCase();\n    //   let typeIndex;\n    //   let columns = [\n    //     { 'text': 'type', 'type': 'string' },\n    //     { 'text': 'name', 'type': 'string' },\n    //     { 'text': 'organization', 'type': 'string' },\n    //     { 'text': 'environment', 'type': 'string' },\n    //     { 'text': 'status', 'type': 'string' },\n    //     { 'text': 'id', 'type': 'string' },\n    //     { 'text': 'organizationId', 'type': 'string' },\n    //     { 'text': 'environmentId', 'type': 'string' },\n    //     { 'text': 'statusCode', 'type': 'number' }\n    //   ]\n    //   if (resource === 'APPLICATION' || resource === 'ALL') {\n    //     columns = [...columns,\n    //     { 'text': 'fileChecksum', 'type': 'string' },\n    //     { 'text': 'fileName', 'type': 'string' },\n    //     { 'text': 'lastUpdateTime', 'type': 'string' }\n    //     ]\n    //   }\n    //   if (resource === 'SERVER' || resource === 'ALL') {\n    //     columns = [\n    //       ...columns,\n    //       { 'text': 'agentVersion', 'type': 'string' },\n    //       { 'text': 'runtimeVersion', 'type': 'string' },\n    //       { 'text': 'currentClusteringIp', 'type': 'string' },\n    //       { 'text': 'addresses', 'type': 'string' },\n    //       { 'text': 'parent', 'type': 'string' },\n    //       { 'text': 'parentType', 'type': 'string' }\n    //     ]\n    //   }\n\n    //   let response = {\n    //     columns: columns,\n    //     rows: [], type: 'table'\n    //   }\n    //   let organizationCache.namesById = this.organizationCache.namesById;\n    //   let environmentNames = this.environmentNames;\n    //   function mapOne(obj) {\n    //     let statues = ['RUNNING', 'STARTED', 'DISCONNECTED', 'STOPPED', 'DEPLOYMENT_FAILED']\n    //     let i;\n    //     for (i = 0; i < statues.length; i++) {\n    //       if (obj.status === statues[i]) {\n    //         break;\n    //       }\n    //     }\n    //     obj.statusCode = i + 1;\n    //     obj.organizationId = targetOrganization\n    //     obj.organization = organizationCache.namesById[targetOrganization]\n    //     obj.environmentId = targetEnvironment\n    //     obj.environment = environmentNames[targetEnvironment]\n    //     response.rows.push(columns.map(x => obj[x.text] || ''))\n    //   }\n\n    //   for (let i = 0; i < data.length; i++) {\n\n    //     if (resource === 'APPLICATION' || target.resource === 'ALL') {\n    //       let deployments = data[i].deployments\n    //       for (let i2 = 0; i2 < deployments.length; i2++) {\n    //         let deployment = deployments[i2].artifact;\n    //         deployment.status = deployments[i2].lastReportedStatus;\n    //         deployment.id = deployments[i2].id;\n    //         deployment.type = 'APPLICATION'\n    //         mapOne(deployment)\n    //       }\n    //     }\n    //     if ((resource === 'SERVER' || target.resource === 'ALL') && data[i].details && data[i].details.servers) {\n    //       let servers = data[i].details.servers;\n    //       for (let i2 = 0; i2 < servers.length; i2++) {\n    //         let server = servers[i2].details;\n    //         server.id = servers[i2].id;\n    //         server.name = servers[i2].name;\n    //         server.status = servers[i2].status;\n    //         server.type = 'SERVER';\n    //         server.parent = data[i].name;\n    //         server.parentType = data[i].type\n    //         server.addresses = JSON.stringify(server.addresses)\n    //         mapOne(server)\n    //       }\n    //     }\n    //     if (resource === data[i].type || resource === 'ALL') {\n    //       mapOne(data[i])\n    //     }\n    //   }\n    //   return [response];\n\n    // }).catch(function (error) {\n    //   console.log(error)\n    //   throw error\n    // })\n    // var query = this.buildQueryParameters(options);\n    // query.targets = query.targets.filter(t => !t.hide);\n\n    // if (query.targets.length <= 0) {\n    //   return this.q.when({ data: [] });\n    // }\n\n    // if (this.templateSrv.getAdhocFilters) {\n    //   query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    // } else {\n    //   query.adhocFilters = [];\n    // }\n\n    // return this.doRequest({\n    //   url: '/query',\n    //   data: query,\n    //   method: 'POST'\n    // });\n  }\n\n  login() {\n    clearTimeout(this.loginTimer)\n    console.log('Getting access token')\n    this.accessToken = ''\n    return this.doRequest({\n      url: '/accounts/login',\n      method: 'POST',\n      data: this.authData\n    }).then(response => {\n      if (!response) {\n        this.accessToken = null\n        return { status: \"error\", message: \"Invalid credentials\" };\n      } else if (response.status === 200) {\n        this.accessToken = response.data.access_token\n        return this.getMyProfile().then((r) => {\n          r = r.data.access_token;\n          let time = 1000 * (r.expires_in) - 30\n          if (time < 10000) { time = 10000 }\n          console.log(\"reauthenticating in\", time)\n          this.loginTimer = setTimeout(() => { this.loginOrRetry() }, time)\n          return { status: \"success\", message: \"Data source is working, found \" + this.organizationCache.list.length + \" organizations\" };\n        })\n      } else {\n        this.accessToken = null\n        return { status: \"failure\", message: \"Status code: \" + response.status };\n      }\n    }).catch(function (err) {\n      console.log(err)\n      this.accessToken = null\n      return { status: \"failure\", message: \"Unknown error, possible invalid url.\" };\n    })\n  }\n  testDatasource() {\n    return this.login();\n  }\n  getMyProfile(includeEnvironments) {\n    this.loadingProfile = true;\n    return this.doRequest({\n      url: '/accounts/api/me',\n      method: 'GET'\n    }).then((response) => {\n      this.organizationCache.list = [\n        { 'text': 'All', value: '*' },\n        ...response.data.user.memberOfOrganizations.map((o,i) => {\n          response.data.user.memberOfOrganizations[i].resourceType='ORGANIZATION'\n          this.organizationCache.idsByName[o.name] = o.id;\n          this.organizationCache.namesById[o.id] = o.name;\n          if (includeEnvironments !== false) {\n            this.getEnvironments(o.id);\n          }\n          return { text: o.name, value: o.id }\n        })]\n      this.loadingProfile = false;\n      return response;\n    });\n  }\n  getEnvironments(targetOrganization) {\n    this.loadingEnvironment++;\n    let organization = this.templateSrv.replace(targetOrganization, null)\n    if (targetOrganization !== organization && this.organizationCache.idsByName[organization]) {\n      organization = this.organizationCache.idsByName[organization]\n    }\n    return this.doRequest({\n      url: '/accounts/api/organizations/' + organization + '/environments',\n      method: 'GET'\n    }).then((response) => {\n      this.environmentCache[organization] = { idsByName: {}, namesById: {} }\n      this.environmentList[organization] = [\n        { 'text': 'All', value: '*' },\n        ...response.data.data.map((o) => {\n          this.environmentCache[organization].idsByName[o.name] = o.id;\n          this.environmentCache[organization].namesById[o.id] = o.name\n          return { text: o.name, value: o.name }\n        })]\n      this.loadingEnvironment--;\n      this.environmentList[organization];\n      return response;\n    });\n  }\n\n  mapToTextValue(result) {\n    if (typeof result === 'object' && !Array.isArray(result)) {\n      result = result.data;\n    }\n    return _.map(result, (d, i) => {\n      if (d && d.id && d.name) {\n        return { text: d.name, value: d.id };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.headers = options.headers || {}\n    if (!options.url.endsWith('/accounts/login')) {\n      if (this.accessToken == null) {\n        this.login()\n      }\n      if (this.accessToken === '') {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            this.doRequest(options).then(resolve).catch(reject)\n          }, 1000)\n        })\n      }\n      options.headers['Authorization'] = 'bearer ' + this.accessToken\n    }\n    for (let x in this.headers) {\n      options.headers[x] = this.headers[x]\n    }\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options).then((data) => {\n      if (!data) {\n        throw new Error('No response received, possible invalid organization or environment.')\n      } else if (data.status !== 200) {\n        throw new Error(\"Status code \" + data.status + \" received\")\n      }\n      return data\n    })\n  }\n\n  // buildQueryParameters(options) {\n  //   //remove placeholder targets\n  //   options.targets = _.filter(options.targets, target => {\n  //     return target.target !== 'select metric';\n  //   });\n\n  //   var targets = _.map(options.targets, target => {\n  //     return {\n  //       target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n  //       refId: target.refId,\n  //       hide: target.hide,\n  //       type: target.type || 'timeserie'\n  //     };\n  //   });\n\n  //   options.targets = targets;\n\n  //   return options;\n  // }\n\n  // getTagKeys(options) {\n  //   return new Promise((resolve, reject) => {\n  //     this.doRequest({\n  //       url: '/tag-keys',\n  //       method: 'POST',\n  //       data: options\n  //     }).then(result => {\n  //       return resolve(result.data);\n  //     });\n  //   });\n  // }\n\n  // getTagValues(options) {\n  //   return new Promise((resolve, reject) => {\n  //     this.doRequest({\n  //       url: '/tag-values',\n  //       method: 'POST',\n  //       data: options\n  //     }).then(result => {\n  //       return resolve(result.data);\n  //     });\n  //   });\n  // }\n\n}\n"]}